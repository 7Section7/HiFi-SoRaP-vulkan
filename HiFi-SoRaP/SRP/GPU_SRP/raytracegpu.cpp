#include "raytracegpu.h"

/***********************************************************************
 +
 * Project: HiFi-SoRaP
 * Created by: Leandro Zardaín Rodríguez (leandrozardain@gmail.com)
 * Created on: 30 Nov 2021
 *
 ***********************************************************************/

#include <iostream>
#include <fstream>
#include <random>
using namespace std;

RayTraceGPU::RayTraceGPU()
{
	reflectionType=Reflective;
}

RayTraceGPU::~RayTraceGPU()
{
}

void RayTraceGPU::setNoiseTexture(int textureId,std::unique_ptr<QGLShaderProgram> &program,
		const float* noiseTexture)
{



	/*
	glEnable(GL_TEXTURE_3D);

	program->bind();
	GLuint texNoise;

	glGenTextures(1, &texNoise);
	glActiveTexture(GL_TEXTURE0+textureId);
	glBindTexture(GL_TEXTURE_1D, texNoise);

	glTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_BORDER);
	float color[] = { 0.25f, 0.5f, 0.75f, 1.0f };
	glTexParameterfv(GL_TEXTURE_1D, GL_TEXTURE_BORDER_COLOR, color);
	glTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	glTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
*/
	/////////////////////// TO REMOVE
	/*
	ofstream myfile;
	myfile.open ("fixed_uniform_noise.txt");
	std::random_device rd;  // Will be used to obtain a seed for the random number engine
	std::mt19937 gen(rd()); // Standard mersenne_twister_engine seeded with rd()
	std::uniform_real_distribution<> dis(0.0, 1.0);
	int textureNoiseIdx = 0;
	while (textureNoiseIdx < 256)
	{
		const auto p = vector3(dis(gen),dis(gen),dis(gen));
		if(Common::length(2*p-vector3(1,1,1))<1)
		{
			myfile << p.x << ", "<< p.y << ", "<< p.z << ", ";
			textureNoiseIdx++;
		}
	}
	myfile.close();*/

	////////////////////


	/*QImage image = QImage("://resources/images/noiseTexture.png");
	int w = image.width();
	int h = image.height();

	int index=0;
	float *pixels = new float[256*3];
	for(int i=0; i<w && index<256;i++)
	{
		for(int j=1; j<h && index<256; j+=2)
		{
			QColor pixel = QColor(image.pixel(i,j));
			float r,g,b;
			r= pixel.redF(); g = pixel.greenF(); b = pixel.blueF();

			/////////////////////// TO REMOVE
			  //myfile << r  << ", " << g << ", " << b << ",";
			///

			pixels[3*index]   = r;
			pixels[3*index+1] = g;
			pixels[3*index+2] = b;
			index++;
		}
	}*/

	/*
	////glTexImage1D(GL_TEXTURE_1D, 0, GL_RGB16, 256, 0, GL_RGB, GL_FLOAT, pixels);
	glTexImage1D(GL_TEXTURE_1D, 0, GL_RGB16, 256, 0, GL_RGB, GL_FLOAT, noiseTexture);

	glUniform1i(program->uniformLocation( "texNoise"), textureId);
	glUniform1i(program->uniformLocation( "numNoiseValues"), 256);
	*/

	//delete [] pixels;
}

/*
0.517647, 0.52549, 0.658824,
0.603922, 0.490196, 0.364706,
0.407843, 0.552941, 0.721569,
0.701961, 0.568627, 0.278431,
0.384314, 0.501961, 0.631373,
0.435294, 0.478431, 0.560784,
0.698039, 0.396078, 0.505882,
0.266667, 0.584314, 0.529412,
0.584314, 0.65098, 0.439216,
0.4, 0.482353, 0.403922,
0.74902, 0.458824, 0.47451,
0.384314, 0.337255, 0.45098,
0.603922, 0.486275, 0.729412,
0.341176, 0.521569, 0.25098,
0.6, 0.721569, 0.603922,
0.509804, 0.388235, 0.478431,
0.45098, 0.384314, 0.435294,
0.364706, 0.541176, 0.690196,
0.623529, 0.47451, 0.545098,
0.615686, 0.462745, 0.498039,
0.262745, 0.745098, 0.298039,
0.501961, 0.462745, 0.639216,
0.552941, 0.396078, 0.537255,
0.439216, 0.478431, 0.498039,
0.627451, 0.639216, 0.529412,
0.615686, 0.364706, 0.258824,
0.505882, 0.572549, 0.494118,
0.482353, 0.592157, 0.666667,
0.435294, 0.258824, 0.443137,
0.427451, 0.509804, 0.584314,
0.419608, 0.490196, 0.337255,
0.733333, 0.596078, 0.501961,
0.388235, 0.639216, 0.482353,
0.560784, 0.501961, 0.560784,
0.490196, 0.454902, 0.419608,
0.462745, 0.533333, 0.74902,
0.376471, 0.298039, 0.278431,
0.486275, 0.670588, 0.603922,
0.6, 0.313726, 0.54902,
0.521569, 0.741176, 0.47451,
0.482353, 0.494118, 0.521569,
0.639216, 0.501961, 0.556863,
0.411765, 0.25098, 0.384314,
0.360784, 0.584314, 0.545098,
0.592157, 0.470588, 0.345098,
0.415686, 0.678431, 0.623529,
0.501961, 0.337255, 0.607843,
0.721569, 0.564706, 0.254902,
0.486275, 0.54902, 0.517647,
0.509804, 0.564706, 0.72549,
0.360784, 0.447059, 0.501961,
0.427451, 0.54902, 0.258824,
0.517647, 0.254902, 0.596078,
0.501961, 0.505882, 0.396078,
0.631373, 0.619608, 0.576471,
0.490196, 0.423529, 0.635294,
0.482353, 0.517647, 0.482353,
0.462745, 0.435294, 0.333333,
0.458824, 0.717647, 0.686275,
0.454902, 0.486275, 0.32549,
0.631373, 0.498039, 0.462745,
0.356863, 0.517647, 0.517647,
0.717647, 0.384314, 0.501961,
0.290196, 0.560784, 0.721569,
0.537255, 0.501961, 0.337255,
0.509804, 0.411765, 0.647059,
0.635294, 0.576471, 0.270588,
0.490196, 0.368627, 0.729412,
0.321569, 0.690196, 0.427451,
0.521569, 0.407843, 0.541176,
0.596078, 0.447059, 0.329412,
0.47451, 0.615686, 0.482353,
0.603922, 0.333333, 0.537255,
0.301961, 0.568627, 0.698039,
0.678431, 0.54902, 0.345098,
0.407843, 0.556863, 0.415686,
0.6, 0.529412, 0.556863,
0.486275, 0.278431, 0.517647,
0.443137, 0.705882, 0.662745,
0.537255, 0.4, 0.313726,
0.486275, 0.615686, 0.678431,
0.552941, 0.294118, 0.313726,
0.466667, 0.717647, 0.678431,
0.392157, 0.478431, 0.486275,
0.662745, 0.333333, 0.431373,
0.513726, 0.447059, 0.592157,
0.258824, 0.721569, 0.34902,
0.6, 0.47451, 0.65098,
0.588235, 0.309804, 0.478431,
0.309804, 0.721569, 0.368627,
0.505882, 0.392157, 0.654902,
0.509804, 0.635294, 0.278431,
0.541176, 0.25098, 0.568627,
0.615686, 0.505882, 0.643137,
0.337255, 0.67451, 0.415686,
0.541176, 0.360784, 0.584314,
0.67451, 0.662745, 0.298039,
0.521569, 0.533333, 0.678431,
0.333333, 0.439216, 0.529412,
0.592157, 0.380392, 0.47451,
0.454902, 0.682353, 0.305882,
0.396078, 0.513726, 0.494118,
0.52549, 0.368627, 0.698039,
0.45098, 0.521569, 0.52549,
0.729412, 0.411765, 0.290196,
0.498039, 0.690196, 0.721569,
0.341176, 0.415686, 0.478431,
0.470588, 0.458824, 0.470588,
0.658824, 0.486275, 0.396078,
0.529412, 0.505882, 0.415686,
0.47451, 0.607843, 0.721569,
0.537255, 0.52549, 0.427451,
0.345098, 0.341176, 0.576471,
0.533333, 0.427451, 0.298039,
0.411765, 0.517647, 0.494118,
0.717647, 0.658824, 0.486275,
0.427451, 0.52549, 0.486275,
0.580392, 0.396078, 0.498039,
0.262745, 0.576471, 0.647059,
0.529412, 0.435294, 0.552941,
0.462745, 0.403922, 0.380392,
0.556863, 0.717647, 0.415686,
0.694118, 0.337255, 0.560784,
0.301961, 0.635294, 0.67451,
0.513726, 0.372549, 0.356863,
0.443137, 0.564706, 0.658824,
0.498039, 0.415686, 0.384314,
0.603922, 0.447059, 0.545098,
0.639216, 0.556863, 0.396078,
0.498039, 0.513726, 0.486275,
0.470588, 0.662745, 0.686275,
0.4, 0.32549, 0.27451,
0.415686, 0.580392, 0.67451,
0.552941, 0.505882, 0.423529,
0.517647, 0.478431, 0.521569,
0.635294, 0.447059, 0.372549,
0.509804, 0.560784, 0.486275,
0.407843, 0.364706, 0.623529,
0.564706, 0.509804, 0.623529,
0.321569, 0.733333, 0.254902,
0.705882, 0.266667, 0.709804,
0.333333, 0.662745, 0.521569,
0.556863, 0.552941, 0.27451,
0.431373, 0.498039, 0.705882,
0.607843, 0.396078, 0.356863,
0.486275, 0.619608, 0.662745,
0.517647, 0.376471, 0.345098,
0.529412, 0.603922, 0.462745,
0.482353, 0.313726, 0.686275,
0.545098, 0.690196, 0.458824,
0.270588, 0.52549, 0.333333,
0.592157, 0.494118, 0.509804,
0.529412, 0.486275, 0.478431,
0.592157, 0.466667, 0.509804,
0.509804, 0.396078, 0.52549,
0.27451, 0.498039, 0.701961,
0.72549, 0.415686, 0.494118,
0.45098, 0.501961, 0.47451,
0.305882, 0.596078, 0.513726,
0.576471, 0.627451, 0.270588,
0.623529, 0.305882, 0.737255,
0.54902, 0.658824, 0.333333,
0.447059, 0.560784, 0.647059,
0.529412, 0.388235, 0.294118,
0.427451, 0.360784, 0.619608,
0.376471, 0.678431, 0.615686,
0.482353, 0.333333, 0.266667,
0.741176, 0.733333, 0.717647,
0.278431, 0.290196, 0.313726,
0.717647, 0.643137, 0.521569,
0.282353, 0.388235, 0.682353,
0.709804, 0.501961, 0.266667,
0.392157, 0.501961, 0.513726,
0.435294, 0.654902, 0.470588,
0.545098, 0.513726, 0.682353,
0.411765, 0.505882, 0.337255,
0.478431, 0.337255, 0.709804,
0.682353, 0.529412, 0.352941,
0.384314, 0.384314, 0.501961,
0.45098, 0.517647, 0.439216,
0.572549, 0.552941, 0.721569,
0.411765, 0.576471, 0.494118,
0.529412, 0.596078, 0.396078,
0.611765, 0.490196, 0.615686,
0.376471, 0.360784, 0.427451,
0.560784, 0.505882, 0.435294,
0.631373, 0.654902, 0.588235,
0.537255, 0.301961, 0.388235,
0.313726, 0.52549, 0.498039,
0.521569, 0.458824, 0.415686,
0.509804, 0.576471, 0.623529,
0.619608, 0.607843, 0.423529,
0.286275, 0.388235, 0.686275,
0.596078, 0.392157, 0.309804,
0.423529, 0.721569, 0.611765,
0.564706, 0.27451, 0.403922,
0.611765, 0.533333, 0.67451,
0.403922, 0.658824, 0.513726,
0.521569, 0.490196, 0.27451,
0.392157, 0.392157, 0.635294,
0.580392, 0.662745, 0.533333,
0.403922, 0.431373, 0.52549,
0.529412, 0.329412, 0.290196,
0.717647, 0.498039, 0.733333,
0.505882, 0.54902, 0.345098,
0.341176, 0.662745, 0.415686,
0.490196, 0.458824, 0.733333,
0.490196, 0.411765, 0.360784,
0.431373, 0.466667, 0.596078,
0.690196, 0.682353, 0.376471,
0.552941, 0.47451, 0.521569,
0.494118, 0.376471, 0.411765,
0.368627, 0.658824, 0.52549,
0.490196, 0.498039, 0.654902,
0.470588, 0.482353, 0.529412,
0.580392, 0.356863, 0.470588,
0.505882, 0.670588, 0.435294,
0.435294, 0.392157, 0.498039,
0.454902, 0.490196, 0.588235,
0.466667, 0.541176, 0.447059,
0.733333, 0.427451, 0.345098,
0.4, 0.627451, 0.745098,
0.435294, 0.423529, 0.364706,
0.588235, 0.392157, 0.392157,
0.52549, 0.670588, 0.729412,
0.439216, 0.517647, 0.290196,
0.619608, 0.392157, 0.482353,
0.282353, 0.623529, 0.509804,
0.717647, 0.501961, 0.729412,
0.494118, 0.407843, 0.301961,
0.403922, 0.513726, 0.647059,
0.596078, 0.34902, 0.447059,
0.490196, 0.615686, 0.388235,
0.266667, 0.596078, 0.556863,
0.705882, 0.435294, 0.423529,
0.45098, 0.513726, 0.694118,
0.560784, 0.533333, 0.345098,
0.337255, 0.352941, 0.537255,
0.690196, 0.52549, 0.423529,
0.27451, 0.654902, 0.513726,
0.482353, 0.258824, 0.533333,
0.564706, 0.662745, 0.541176,
0.54902, 0.537255, 0.654902,
0.615686, 0.537255, 0.415686,
0.509804, 0.278431, 0.470588,
0.505882, 0.662745, 0.431373,
0.27451, 0.47451, 0.607843,
0.611765, 0.435294, 0.498039,
0.423529, 0.407843, 0.415686,
0.490196, 0.745098, 0.513726,
0.501961, 0.262745, 0.396078,
0.517647, 0.662745, 0.592157,
0.588235, 0.580392, 0.537255,
0.560784, 0.34902, 0.376471,
0.435294, 0.65098, 0.623529,
0.34902, 0.25098, 0.368627
*/
void RayTraceGPU::setDiffuseRays(std::unique_ptr<QGLShaderProgram> &program)
{
	program->bind();
	GLuint idNumDiffuseRays = program->uniformLocation("numDiffuseRays");
	glUniform1i(idNumDiffuseRays,diffuseRays);

}

int RayTraceGPU::getDiffuseRays() const
{
	return diffuseRays;
}

void RayTraceGPU::setDiffuseRays(int value)
{
	diffuseRays = value;
}

void RayTraceGPU::setReflectionType(std::unique_ptr<QGLShaderProgram> &program)
{
	program->bind();
	GLuint idReflectionType = program->uniformLocation("reflectionType");
	glUniform1i(idReflectionType,reflectionType);
}

int RayTraceGPU::getReflectionType() const
{
	return reflectionType;
}

void RayTraceGPU::setReflectionType(int value)
{
	reflectionType = value;
}

void RayTraceGPU::setNumSecondaryRays( std::unique_ptr<QGLShaderProgram> &program)
{
	program->bind();
	GLuint idNumSecondaryRays = program->uniformLocation("numSecondaryRays");
	glUniform1i(idNumSecondaryRays,numSecondaryRays);
}

int RayTraceGPU::getNumSecondaryRays() const
{
	return numSecondaryRays;
}

void RayTraceGPU::setNumSecondaryRays(int value)
{
	numSecondaryRays = value;
}
